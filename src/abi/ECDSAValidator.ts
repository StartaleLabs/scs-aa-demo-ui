export const ECDSAValidatorAbi = [
  {
    inputs: [{ internalType: "address", name: "smartAccount", type: "address" }],
    name: "AlreadyInitialized",
    type: "error",
  },
  {
    inputs: [{ internalType: "uint256", name: "length", type: "uint256" }],
    name: "AssociatedArray_LengthExceeded",
    type: "error",
  },
  { inputs: [], name: "InvalidDataLength", type: "error" },
  { inputs: [], name: "InvalidSafeSendersLength", type: "error" },
  { inputs: [], name: "InvalidSignature", type: "error" },
  {
    inputs: [{ internalType: "address", name: "target", type: "address" }],
    name: "InvalidTargetAddress",
    type: "error",
  },
  { inputs: [], name: "ModuleAlreadyInitialized", type: "error" },
  { inputs: [], name: "NoOwnerProvided", type: "error" },
  {
    inputs: [{ internalType: "address", name: "smartAccount", type: "address" }],
    name: "NotInitialized",
    type: "error",
  },
  { inputs: [], name: "OwnerCannotBeZeroAddress", type: "error" },
  {
    anonymous: false,
    inputs: [
      { indexed: true, internalType: "address", name: "account", type: "address" },
      { indexed: true, internalType: "address", name: "owner", type: "address" },
    ],
    name: "OwnerRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [{ indexed: true, internalType: "address", name: "account", type: "address" }],
    name: "OwnerRemoved",
    type: "event",
  },
  {
    inputs: [{ internalType: "address", name: "_sender", type: "address" }],
    name: "addSafeSender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "_smartAccount", type: "address" }],
    name: "getOwner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "_smartAccount", type: "address" }],
    name: "isInitialized",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "uint256", name: "_typeId", type: "uint256" }],
    name: "isModuleType",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_sender", type: "address" },
      { internalType: "address", name: "_smartAccount", type: "address" },
    ],
    name: "isSafeSender",
    outputs: [{ internalType: "bool", name: "", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      { internalType: "address", name: "_sender", type: "address" },
      { internalType: "bytes32", name: "_hash", type: "bytes32" },
      { internalType: "bytes", name: "_signature", type: "bytes" },
    ],
    name: "isValidSignatureWithSender",
    outputs: [{ internalType: "bytes4", name: "", type: "bytes4" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes", name: "_data", type: "bytes" }],
    name: "onInstall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "bytes", name: "", type: "bytes" }],
    name: "onUninstall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "_sender", type: "address" }],
    name: "removeSafeSender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "supportsNestedTypedDataSign",
    outputs: [{ internalType: "bytes32", name: "result", type: "bytes32" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [{ internalType: "address", name: "_newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      { internalType: "bytes32", name: "_hash", type: "bytes32" },
      { internalType: "bytes", name: "_sig", type: "bytes" },
      { internalType: "bytes", name: "_data", type: "bytes" },
    ],
    name: "validateSignatureWithData",
    outputs: [{ internalType: "bool", name: "validSig", type: "bool" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          { internalType: "address", name: "sender", type: "address" },
          { internalType: "uint256", name: "nonce", type: "uint256" },
          { internalType: "bytes", name: "initCode", type: "bytes" },
          { internalType: "bytes", name: "callData", type: "bytes" },
          { internalType: "bytes32", name: "accountGasLimits", type: "bytes32" },
          { internalType: "uint256", name: "preVerificationGas", type: "uint256" },
          { internalType: "bytes32", name: "gasFees", type: "bytes32" },
          { internalType: "bytes", name: "paymasterAndData", type: "bytes" },
          { internalType: "bytes", name: "signature", type: "bytes" },
        ],
        internalType: "struct PackedUserOperation",
        name: "_userOp",
        type: "tuple",
      },
      { internalType: "bytes32", name: "_userOpHash", type: "bytes32" },
    ],
    name: "validateUserOp",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "pure",
    type: "function",
  },
];
